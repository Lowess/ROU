#!/bin/sh
# the next line restarts using wish \
exec wish "$0" "$@"

#    rou
#    an airplug compatible program
#    author: Florian DAMBRINE
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE ROU ####################################################
 
### VARIABLES OF THE MODULE ###################################################
 
# Current routing table
set ROU_tab_routingTable $ROU_rc_routingTable
set ROU_tab_periodDeclareDead $ROU_rc_periodDeclareDead

set ROU_tab_mnemoapp $ROU_rc_mnemoapp
set ROU_tab_mnemoTypeMessage $ROU_rc_mnemoTypeMessage
set ROU_tab_mnemoID $ROU_rc_mnemoID
set ROU_tab_mnemoTableRoutage $ROU_rc_mnemoTableRoutage

###############################################################################

### GRAPHICAL AREA OF THE MODULE ##############################################
 
###############################################################################
 
### COMMAND LINE OPTION #######################################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
 
    switch -- $name {
		--hlg-hini {
			if { $value == "" } {
				APG_vrb_dispwarning "option $name found without argument ; ignored"
			} else {
				set HLG_lam_h $value
				APG_vrb_dispnotif "option $option found; initial Lamport's clock value=$value"
			}
		}
    }
}
###############################################################################

### PROCEDURES OF THE MODULE ##################################################

#-- Procedure ROU_tab_periodicalSend --------------------------------------------#
# Action : send periodicaly the routing table to connected APPs                  #
# Input  : the period					                                         #
# Output : nothing                                                               #
#--------------------------------------------------------------------------------#

proc ROU_tab_periodicalSend { period } {
	#Serialized the routing table
	set serialized [ROU_fmt_serialize $::ROU_tab_routingTable]
	#Set the name of the sender
	set msg [APG_msg_createmsg $::ROU_tab_mnemoapp $::APP]
	#Set the type of message
	set msg2 [APG_msg_addmsg msg $::ROU_tab_mnemoTypeMessage "routage"]
	#Set the type of message
	set msg3 [APG_msg_addmsg msg2 $::ROU_tab_mnemoID $::APG_ident]
	#Set the real payload
	set msg4 [APG_msg_addmsg msg3 $::ROU_tab_mnemoTableRoutage $serialized]
	#Send the message
	ROU_snd_send $msg4 $::APP

	after $period ROU_tab_periodicalSend $period
}

#-- Procedure ROU_tab_displayRoutingTable ---------------------------------------#
# Action : display a given routing table                                         #
# Input  : the routing table to display                                          #
# Output : nothing                                                               #
#--------------------------------------------------------------------------------#

proc ROU_tab_displayRoutingTable { paramRoutingTable } {
	 set display "\n-----------\n"
	foreach route $paramRoutingTable {
		append display $route
		append display "\n"
	}
	append display "-----------\n"
	APG_vrb_dispdebug $display
}

#-- Procedure ROU_tab_getRoute --------------------------------------------------#
# Action : return the route to follow to reach the given destination	         #
# Input  : destination to reach                                                  #
# Output : the route to follow                                                   #
#--------------------------------------------------------------------------------#

proc ROU_tab_getRoute { destination } {
	set nextHop ""
	foreach route $::ROU_tab_routingTable {
		#Check if it's the given route
		if { [lindex $route 0] == $destination } { 
			set nextHop [lindex $route 1]
		}
	}
	#Return the next hop
	return $nextHop
}

#-- Procedure ROU_tab_removeRoute -----------------------------------------------#
# Action : remove the route according to the given destination	                 #
# Input  : destination to remove from the routing table                          #
# Output : Nothing                                                               #
#--------------------------------------------------------------------------------#

proc ROU_tab_removeRoute { routeToRemove } {
	foreach route $::ROU_tab_routingTable {
		#Check if it's the given route
		if { [lindex $route 0] == $routeToRemove } { 
			#Get the index of the line
			set index [lsearch $::ROU_tab_routingTable $route]
			#Remove the index from the routing table
			set ::ROU_tab_routingTable [lreplace $::ROU_tab_routingTable $index $index]
		}
	}
}

#-- Procedure ROU_tab_incrTimer -------------------------------------------------#
# Action : increment all timers in the routing table each given period           #
# Input  : The period												             #
# Output : Nothing                                                               #
#--------------------------------------------------------------------------------#

proc ROU_tab_incrTimer { period } {
	#Contains the new routing table
	set updatedRoutingTable [list ]
	foreach route $::ROU_tab_routingTable {
		#Get the route 
		set update $route
		#Get the current timer
		set newTimer [lindex $update 3]
		#Increment the timer if it's not the current site
		if { [lindex $route 0] != $::APG_ident } { 
			#Increment the timer
			incr newTimer
		}
		#Modify the route with the incremented timer
		lset update 3 $newTimer
		
		#If the timer expires, removes the route
		if { $newTimer >= $::ROU_tab_periodDeclareDead } {
			ROU_tab_removeRoute [lindex $route 0]
		} else {
			#Get the index of the line
			set index [lsearch $::ROU_tab_routingTable $route]
			#Increment the timer and update the table
			lappend updatedRoutingTable $update	
		}
	}
	#Update the routingTable
	set ::ROU_tab_routingTable $updatedRoutingTable 
	after $period ROU_tab_incrTimer $period
}

#-- Procedure ROU_tab_setRoute --------------------------------------------------#
# Action : update the routing table when a shortest path is given
#		   take in account a new route											 #
# Input  : name of the sender						                             #
# Input  : new routingTable given by an other ROU app                            #
# Output : nothing                                                               #
#--------------------------------------------------------------------------------#

proc ROU_tab_setRoute { app newRoutingTable } {
	#Iterates on the remote table
	foreach updatedRoute $newRoutingTable {
		set paramDestination [lindex $updatedRoute 0]
		set paramNextHop [lindex $updatedRoute 1]
		set paramDistance [lindex $updatedRoute 2]
		incr paramDistance
		set flag "false"
		
		foreach routeToUpdate $::ROU_tab_routingTable {
			#Check if it's the right route to update
			if { [lindex $routeToUpdate 0] == $paramDestination } { 
				#Table6 node4 node7 2
				#Table7 node4 node4 1
				set flag "true"
				
				#Get the current nextHop
				set currentNextHop [lindex $routeToUpdate 1]
				
				#Set the distance with a +1
				set currentDistance [lindex $routeToUpdate 2]
				
				#If I have a better route, I update
				if { $paramDistance < $currentDistance } {
					#paramDestination == currentDestination
					set updatedRoute [list $paramDestination "" "" ""]
					#Update the next hop
					lset updatedRoute 1 $app
					#Update the distance
					lset updatedRoute 2 $paramDistance
					#Update the timer
					lset updatedRoute 3 0
					#Update the routing table
					lset ::ROU_tab_routingTable [lsearch $::ROU_tab_routingTable $routeToUpdate] $updatedRoute
				} else {
					#Otherwise... it resets the timer
					if { $currentDistance == $paramDistance && $currentNextHop == $app } {
						set updatedRoute $routeToUpdate
						lset updatedRoute 3 0
						lset ::ROU_tab_routingTable [lsearch $::ROU_tab_routingTable $routeToUpdate] $updatedRoute 
					}
				}
			}
		}
		#A new route was given so I have to add it
		if { $flag == "false" } {
			set updatedRoute [list $paramDestination $app $paramDistance 0]
			lappend ::ROU_tab_routingTable $updatedRoute
		}
	}
}

###############################################################################
