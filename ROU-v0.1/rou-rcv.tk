#    rou
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# dernier message recu
set ROU_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set ROU_rcv_app $APG_msg_unknown

# mnemonique pour le header ROU, contenant le nom de l'application qui a emis
# le message transporte.
set ROU_rcv_mnemoapp $ROU_rc_mnemoapp

###############################################################################


### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable ROU_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable ROU_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
				--source {
						#--------------------------------------------------------------------------------
						# applications emettrices auxquelles il faut s'abonner
						#--------------------------------------------------------------------------------
						if { $value == "" } {
								APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
						} else {
								APG_vrb_dispnotif "option $option trouvee, abonnement a l'app source $value"
								APG_begin_lch $value
						}
				}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################

#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : gere la reception de messages                                      #
# Remarq : surcharge de LIBAPGTK                                              #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_receive_whatwho { what who } {

	# Mise a jour de l'interface du module rcv.
    set ::ROU_rcv_msg $what
    set ::ROU_rcv_app $who

	# Traitement different selon l'emetteur.
    switch -- $::ROU_rcv_app! \
				$::APP {
						# Récuperation of the sender and the payload
						set app [APG_msg_splitstr who $::ROU_rcv_mnemoapp]
						set msg [APG_msg_endstr what $::ROU_rcv_mnemoapp true]
						# Recuperation of the type of message and the routage table (if exist)
						set typemsg [APG_msg_splitstr what $::ROU_rc_mnemoTypeMessage]
						set tableroutage [APG_msg_splitstr what $::ROU_rc_mnemoTableRoutage]
						
						# Recuperation of the wanted node (help us to decide if the current node match the nexthope of the
						# incoming message, if not, we don't do anything, if yes, we look for the next hope)
						set nodeExpected [APG_msg_splitstr what $::ROU_rc_mnemoNextHope]

						#A SUPP
						APG_vrb_dispdebug "On est sur $::APP"

						# if it's only 2 app ROU who exchange theirs tables
						if { $typemsg == "routage" } {
							set table_routage_recu [ROU_fmt_unserialize $tableroutage]
							# we try to update the existing route (or create some new one)
							#ROU_tab_displayRoutingTable $table_routage_recu								

							ROU_tab_setRoute $app $table_routage_recu

							ROU_tab_displayRoutingTable $::ROU_tab_routingTable


						# else , it's will be some package to transfert to an other 
						# node
						} else {

							# we extract the destination of the packet
							set destapp [APG_msg_splitstr what $::ROU_rc_mnemoDestApp]
							set destnode [APG_msg_splitstr what $::ROU_rc_mnemoDestNode]

							# the message come from a local application (which doesn't have the mnemo nextHope set yet) 
							if { $nodeExpected == "-" } {
								# We set the mnemonique and send the msg to the next node
								set nextNode [ROU_tab_getRoute $destnode]
								set nextMessage [APG_msg_addmsg msg $::ROU_rc_mnemoNextHope $destnode]
								APG_vrb_dispdebug "Viens de l'appli local $::APP Envoi au dest node $destnode"
								ROU_snd_send $nextMessage $::APP
							} else {

								# else, we look if the nodeExpected match the current node. If not we don't do anything
								if { $nodeExpected == $::APP } {

										# if yes, we look for the type of message 
										if { $typemsg == "OTHER" } {

											# if the destination is the current node, thats mean the message is on the right node
											# but doesn't mean it's on the right application
											if { $destnode == $::APP } {

												# we send the message to the local application
												# which can know the msg is for her by looking at the DestApp mnemo.
												# IMPORTANT: for the moment, we assume there is only one type of application
												# runing one the same node but also that only ROU application are connected
												# between two node (2 local application from different node can't be connected to the same ROU)
												APG_vrb_dispdebug "On est sur le bon node $::APP envoi a l'appli local" 	
												
												ROU_snd_send $msg $::APP

											# else, we are on the good expected node but it's not the one where the message
											# is send (so we looking now for the nexthope)
											} else {

												APG_vrb_dispdebug "On est pas sur le bon node $::APP dest $destnode"


												set nextNode [ROU_tab_getRoute $destnode]
												ROU_tab_displayRoutingTable $::ROU_tab_routingTable
												APG_vrb_dispdebug "le nextNode $nextNode"
												set nextMessage [APG_msg_replaceval msg $::ROU_rc_mnemoNextHope $nextNode]
												APG_vrb_dispdebug "le nextMessage $nextMessage "

												ROU_snd_send $nextMessage $::APP

											}
										}
									}
							}
						}
				}
}

