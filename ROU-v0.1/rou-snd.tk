#    rou
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE EMISSION ###########################################################

### VARIABLES DU MODULE #######################################################
set ROU_snd_msg $APG_msg_unknown
set ROU_snd_app $APG_msg_unknown
set MsgCount 0
set ROU_snd_mnemoID $ROU_rc_mnemoID
set ROU_snd_mnemoTypeMessage $ROU_rc_mnemoTypeMessage
###############################################################################


### ZONE DU MODULE ############################################################
labelframe .snd -pady 2 -padx 2 \
    -text "Emission \[$APP, ident = $APG_ident\]" -fg $APG_int_coltitle

label .snd.t1 -text "Dernier message Ã©mis vers "
label .snd.app -textvariable ROU_snd_app -width 4 -fg $APG_int_colmsgsnd
label .snd.t2 -text " : "
label .snd.msg -textvariable ROU_snd_msg -width 64  -fg $APG_int_colmsgsnd -anchor w
pack .snd.t1 .snd.app .snd.t2 .snd.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone snd
pack .snd.msg .snd.app -side left -fill y -pady 2
###############################################################################


### PROCEDURE DU MODULE #######################################################

#-- Procedure ROU_snd_send ---------------------------------------------------#
# Action : procedure appelee par le module rcv pour emettre le message et     #
#          mettre a jour l'interface du module snd.                           #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc ROU_snd_send { what who } {
		
		# Mise a jour de l'interface du module snd.
		set ::ROU_snd_msg $what
		set ::ROU_snd_app $who
		
		# we look if the msg already have an id set.
		set idmsg [APG_msg_splitstr what $::ROU_snd_mnemoID]
		set typeMsg [APG_msg_splitstr what $::ROU_snd_mnemoTypeMessage]
		# if not, we set one	

		if { $typeMsg != "routage" } {
			if { $idmsg == "-" } {
				APG_vrb_dispdebug "if SEND--> $who  ||||  $what"
			
				# we concat the current count with APG-ident, to set an uniq id
				set separator "_"
				set ID "$::APG_ident$separator$::MsgCount"
				set modifiedMessage [APG_msg_addmsg what $::ROU_snd_mnemoID $ID]

				# we increment the current message MsgCount
				incr $::MsgCount

				APG_vrb_dispdebug "SEND--> $who  ||||  $what"

				ROU_dif_addMessage $ID

				APG_send_whatwho $modifiedMessage $who
			} else {
				ROU_dif_addMessage $idmsg
				APG_send_whatwho $what $who
			}
		} else {
			APG_send_whatwho $what $who
		}
		
}

###############################################################################
